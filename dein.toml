[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo= 'Shougo/neosnippet-snippets'

[[plugins]]
repo= 'altercation/vim-colors-solarized'

[[plugins]]
repo= 'airblade/vim-gitgutter'

[[plugins]]
repo= 'tpope/vim-fugitive'
hook_add= '''
"gitgutter
let g:gitgutter_signs = 0
",ggで機能on/off
nnoremap <silent> ,gg :<C-u>GitGutterToggle<CR> 
",ghハイライトのトグル
nnoremap <silent> ,gh :<C-u>GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo= 'scrooloose/nerdtree'
hook_add= '''
nnoremap <C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'jalvesaq/Nvim-R'
on_ft = ['rmd','r']
hook_add = '''
" Change Leader and LocalLeader keys:
let maplocalleader = ","
let mapleader = ";"
" Use Ctrl+Space to do omnicompletion:
if has("gui_running")
	inoremap <C-Space> <C-x><C-o>
else
	inoremap <Nul> <C-x><C-o>
endif
" Type two `_` to get them converted into `<-`.
let R_assign = 2
" Split R windows vertically
let R_rconsole_width = 75
let R_min_editor_width = 75
" Split help windows horizontally
let R_nvimpager = "horizontal"
" I prefer do not have the arguments of functions aligned
let r_indent_align_args = 0
'''

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex']
hook_add = '''
let g:vimtex_latexmk_background = 1
" let g:vimtex_latexmk_options = '-c'
let g:vimtex_view_general_viewer = '/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '-r @line @pdf @tex'

" This adds a callback hook that updates Skim after compilation
let g:vimtex_latexmk_callback_hooks = ['UpdateSkim']
function! UpdateSkim(status)
    if !a:status | return | endif
    let l:out = b:vimtex.out()
    let l:tex = expand('%:p')
    let l:cmd = [g:vimtex_view_general_viewer, '-r']
    if !empty(system('pgrep Skim'))
    call extend(l:cmd, ['-g'])
    endif
    if has('nvim')
    call jobstart(l:cmd + [line('.'), l:out, l:tex])
    elseif has('job')
    call job_start(l:cmd + [line('.'), l:out, l:tex])
    else
    call system(join(l:cmd + [line('.'), shellescape(l:out), shellescape(l:tex)], ' '))
    endif
    endfunction
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
