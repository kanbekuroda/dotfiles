[[plugins]]
repo = 'Shougo/vimshell.vim'
on_map = [['n', '<Plug>']]
hook_add = '''
    nmap [Space]s  <Plug>(vimshell_switch)
    nnoremap <silent> \is :VimShell<CR>
    nnoremap <silent> \isp :VimShellPop<CR>
    " \ipy: ipythonを非同期で起動
    nnoremap <silent> \ipy :VimShellInteractive ipython-2.7 console<CR>
    " \irb: irbを非同期で起動
    nnoremap <silent> \irb :VimShellInteractive irb<CR>
    " \irr: Rを非同期で起動
    nnoremap <silent> \irr :VimShellInteractive r<CR>
    " 選択中に\ss: 非同期で開いたインタプリタに選択行を評価させる
    vnoremap \ss :VimShellSendString<CR>
    " \ss: 非同期で開いたインタプリタに現在の行を評価させる
    nnoremap <silent> \ss <S-v>:VimShellSendString<CR>"}}}
'''
    hook_source = '''
    "source ~/.vim/rc/plugins/vimshell.rc.vim
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_add = '''
" バッファ一覧
noremap <C-k><C-B> :<C-u>Unite buffer<CR>
" ファイル一覧
noremap <C-k><C-f> :<C-u>UniteWithBufferDir file -buffer-name=file<CR>
" 最近使ったファイルの一覧
noremap <C-k><C-N> :<C-u>Unite file_mru<CR>
" レジスタ一覧
noremap <C-k><C-R> :<C-u>Unite -buffer-name=register register<CR>
" ファイルとバッファ
noremap <C-k><C-k> :<C-u>Unite buffer file_mru<CR>
" 全部
noremap <C-k><C-A> :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
" キーマップを表示
noremap <C-k><C-M> :<C-u>Unite mapping<CR>
" スクリプトを表示
noremap <C-k>s :<C-u>Unite scriptnames<CR>
" コマンドを表示
noremap <C-k>c :<C-u>Unite command<CR>
" ヤンクヒストリ
noremap <C-k><C-y> :<C-u>Unite history/yank<CR>
" ヘルプ参照
noremap <C-k><C-h> :<C-u>Unite help<CR>
" pydoc
noremap <C-k><C-d> :<C-u>Unite ref/pydoc<CR>
" カラースキーム
noremap <C-k><C-l> :<C-u>Unite colorscheme<CR>
    " スニペット
imap <C-k><C-i> <Plug>(neosnippet_start_unite_snippet)
    " todo
    noremap <C-k><C-t> :<C-u>Unite tweetvim<CR>
    " let g:unite_todo_note_suffix="md"
    " Spotlight
    noremap <C-k><C-p> :<C-u>Unite spotlight<CR>
    " Outline
    noremap <C-k><C-o> :<C-u>Unite outline<CR>
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "has('lua')"
on_event = 'InsertEnter'
hook_source = '''
"Settings for neocomplete

let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
	\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
	let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*' 
    " Plugin key-mappings.
    inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
    return neocomplete#close_popup() . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ?
    neocomplete#close_popup() : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y> neocomplete#close_popup()
inoremap <expr><C-e> neocomplete#cancel_popup()
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ?  neocomplete#close_popup() : "\<Space>"

    " For cursor moving in insert mode(Not recommended)
    "inoremap <expr><Left> neocomplete#close_popup() . "\<Left>"
    "inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
    "inoremap <expr><Up> neocomplete#close_popup() . "\<Up>"
    "inoremap <expr><Down> neocomplete#close_popup() . "\<Down>"
    " Or set this.
    "let g:neocomplete#enable_cursor_hold_i = 1
    " Or set this.
    "let g:neocomplete#enable_insert_char_pre = 1

    " AutoComplPop like behavior.
    "let g:neocomplete#enable_auto_select = 1

    " Shell like behavior(not recommended).
    "set completeopt+=longest
    "let g:neocomplete#enable_auto_select = 1
    "let g:neocomplete#disable_auto_complete = 1
    "inoremap <expr><TAB>  pumvisible() ?  "\<Down>" : "\<C-x>\<C-u>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
    endif
    "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl ='h\w*->\h\w*\|\h\w*::'

    " R (plugin: vim-R-plugin)
    let g:neocomplete#sources#omni#input_patterns.r =
    \ '[[:alnum:].\\]\+'
    "let g:neocomplete#sources#omni#functions.r =
    "\ 'rcomplete#CompleteR'
    " " Rmd (plugin: vim-R-plugin)
    "let g:neocomplete#sources#omni#input_patterns.rmd =
    "\ '[[:alnum:].\\]\+'
    "let g:neocomplete#sources#omni#functions.rmd =
    "\ 'rcomplete#CompleteR'
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_event = 'InsertEnter'
hook_source = '''

let g:deoplete#enable_at_startup = 1
" Use smartcase.
let g:deoplete#enable_smart_case = 1

if !exists('g:deoplete#keyword_patterns')
let g:deoplete#keyword_patterns = {}
endif
let g:deoplete#keyword_patterns['default'] = '\h\w*' 

let g:deoplete#omni#input_patterns = {}
let g:deoplete#omni#input_patterns.ruby =
\ ['[^. *\t]\.\w*', '[a-zA-Z_]\w*::']
let g:deoplete#omni#input_patterns.java = '[^. *\t]\.\w*'
let g:deoplete#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:deoplete#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	let g:deoplete#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
	    let g:deoplete#omni#input_patterns.r = '[[:alnum:].\\]\+'
	    let g:deoplete#omni#input_patterns.rmd = '[[:alnum:].\\]\+'

	    "let g:deoplete#omni#functions.r = 'rcomplete#CompleteR'
	    "let g:deoplete#omni#functions.rmd = 'rcomplete#CompleteR'


	    " Enable omni completion.
	    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
	    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags


	    inoremap <expr><C-h>
	    \ deoplete#mappings#smart_close_popup()."\<C-h>"
	    inoremap <expr><BS>
	    \ deoplete#mappings#smart_close_popup()."\<C-h>"
	    inoremap <expr><C-g>  deoplete#mappings#undo_completion()

    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
    return deoplete#mappings#close_popup() . "\<CR>"
    endfunction

    " Let <Tab> also do completion
    inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : deoplete#mappings#manual_complete()
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_source = 'unite.vim'

[[plugins]]
repo = 'tsukkee/unite-tag'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-help'
on_source = 'unite.vim'

[[plugins]]
repo = 'choplin/unite-spotlight'
on_source = 'unite.vim'

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add = '''
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo= 'scrooloose/syntastic'
on_ft = ['c','r','rmd','php','go','ruby','python','tex']

[[plugins]]
repo= 'vim-scripts/qtmplsel.vim'
on_ft = ['rmd','tex']

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = [['n', '<Plug>']]
on_if = "isdirectory(bufname('%'))"
hook_add = '''
nnoremap <silent>   [Space]v   :<C-u>VimFiler -invisible<CR>
"nnoremap <Leader>e :VimFilerExplorer<CR>
'''
hook_source = '''
autocmd MyAutoCmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'vimfiler') | q | endif
" let g:vimfiler_as_default_explorer = 1
" let g:vimfiler_enable_auto_cd = 1
" Edit file by tabedit.
let g:vimfiler_edit_action = 'tabopen'
" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'
'''

[[plugins]]
repo= 'thinca/vim-quickrun'
on_map = [['n', '<Plug>']]
hook_add = 'nmap <silent> <Leader>r <Plug>(quickrun)'
